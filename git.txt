一、git概述
	目前最流行的版本控制工具

	1.版本控制概念
		在代码开发过程中，往往需要对源码进行多次的修改操作，这样一来同一份代码就产生了多个版本，在开发过程中通常需要对这些多个版本代码进行管理，以便于在需要时进行 代码回滚、多版本间比较、多人协作开发、代码分支、分支合并 等操作。
		这样的需求大量的存在，而随着软件越来越复杂、代码越来越多、参与开发者越来越多，版本管理也变的越来越有难度，此时就需要专业的软件来对版本进行管理，这个过程就称之为版本控制，实现版本控制的软件就称之为版本控制软件。

	2.版本控制软件分类
		集中式版本控制
			在集中式版本控制中，版本库是集中存放在中央服务器的，开发者在开发之前要先从中央服务器取得最新的版本，然后开始工作，工作完成后，再把自己的代码推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。				
			
			优点：
				便于集中式的代码管理
				便于进行权限控制
			缺点：
				需要联网才可以工作,而且项目庞大的情况下对带宽的要求比较高
				中心服务器存在单节点故障风险

			CVS、SVN

		分布式版本控制
			在分布式版本控制系统中，没有“中央服务器”的概念，每个人的电脑上都是一个完整的版本库。而在多人协同工作时，通过推送各自的修改，保证多人间的版本一致。
			但其实，在实际开发中，很少真的在两个电脑间进行修改的推送，而是选择一台充当“中央服务器”，但这个服务器仅仅是为了使用便利，本质上和其他机器没有任何区别，即使宕机，整个分布式版本控制仍然可以工作。

			优点：
				不需要联网也可以工作
				不存在单节点故障风险

			缺点：
				无法实现严格的权限控制

			Git
		
	3.git历史
		Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。
		Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？
		在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！
		你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。
		不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。
		安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。
		Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：
		Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。
		Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。
		历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。

二、git安装配置
	1.下载Git
		Git最早只支持Linux，目前已经能够支持Linux、Unix、Windows、OS系统之上。
		下载地址：
			https://git-scm.com/

	2.安装Git
		Linux上安装Git
			解压Linux版源码包
			依次执行
				./config
				make
				sudo make install

		Windows上安装Git
			下载安装包
			双击执行默认安装
			双击 Git Bush 即可启动Git

	4.初始配置Git
		因为Git是一款分布式的版本控制软件，多用户之间的互相通信需要确定身份，所以安装Git后需要先配置当前用户的名称和邮箱，才可以使用

		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"

三、创建版本库
	1.版本库的概念
		版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。

	2.创建版本库
		在任意位置创建一个文件夹，位置可以任意，但是强烈建议目录路径中不要包含中文。
			$cd e:
			$pwd
			$mkdir gitdemo01
			$cd gitdemo01
		通过git命令将该目录变为git所管理的仓库
			$ git init
		命令执行后，该目录下会多出一个.git的目录，这个目录是Git来跟踪管理版本库的，请勿手动修改。
		**也可以在一个非空的文件夹中创建仓库，但是在学习阶段先不要这样做。


四、版本管理
	1.提交新文件
		注意，所有版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但无法跟踪文件内容的变化，只能查看文件信息变化，如大小、更新时间等。
		
		将需要管理的文件放置到仓库目录下
			test.txt
				Git is a version control system.
				Git is free software.

		查看版本库状态
			git status
			
		增加文件到暂存区			
			git add test.txt

		提交版本到分支
			git commit -m "add file test.txt"

		查看版本库状态
			git status
		
		**-m后面输入的是本次提交的说明，可以输入任意内容
		**本例中只经历了一个修改就提交了，其实完全可以 多个修改后一次提交

	2.提交修改
		修改test.txt
			git is a version control system.
			git is free software.

		查看版本库状态
			git status

		查看文件具体修改
			git diff test.txt

		增加文件到暂存区
			git add test.txt

		提交版本到分支
			git commit -m "change Git to git"

		可以再次查看状态
			git status

	3.查看历史版本
		修改test.txt
			git is a version control system.
			git is free software.
			git is good

		增加文件到暂存区
			git add test.txt

		提交版本到分支
			git commit -m "add new line git is good"

		...重复以上步骤保存文件的多个版本...

		查看历史版本
			git log
			或
			git log --pretty=oneline

	4.回滚版本
		回滚版本
			git reset --hard HEAD^
	
		**在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。	
		
		也可以通过版本包跳转版本，比上一种写法好的地方在于可以跳转到已经被回退的版本上:
			git reset --hard 5527510751b4303390bb4f321bfa8b7f997cbfd0
			或简写为
			git reset --hard 55275

		但是问题是如知道版本号呢？可以通过如下命令查看之前所有提交对应操作及版本号：
			git reflog

五、工作区 、版本库、暂存区、分支 概念
	工作区：存放文件的位置
	版本库：工作区中.git文件夹
	暂存区：版本库中 包含暂存区 git add命令加入的操作 被记录在暂存区内
	分支：最终版本信息保存的位置 git commit命令将暂存区内记录的操作 提交到分支中
			可以配置多个分支，如果不指定则默认为master分支，并有一个head指针指向master分支的最开始位置
			
	!!Git跟踪并管理的是修改，而非文件。

	实验：
		修改test.txt
			git is a version control system.
			git is free software.
			git is good
			git is easy to use

		增加文件到暂存区
			git add test.txt
		
		修改test.txt
			git is a version control system.
			git is free software.
			git is good
			git is easy to use
			git is really useful

		提交版本到分支
			git commit -m "change test"

		查看状态：
			git status

		发现git is really useful并没有被提交


六、撤销修改
	尚未增加文件到暂存区：
		修改test.txt
			git is a version control system.
			git is free software.
			git is good
			git is easy to use
			git is really useful
			boss is stupid
		撤销修改 -- 将文件恢复到最近一次add 或 commit之前的状态
			git checkout -- test.txt

	已经增加文件到暂存区，但尚未提交到分支：
		修改test.txt
			git is a version control system.
			git is free software.
			git is good
			git is easy to use
			git is really useful
			boss is stupid
		增加文件到暂存区：
			git add 
		撤销修改 -- 把暂存区的修改撤销掉
			git reset HEAD readme.txt
		撤销修改 -- 将文件恢复到最近一次add 或 commit之前的状态
			git checkout -- test.txt

	已经增加文件到暂存区，且已提交到分支：
		可以通过之前所学的版本回退技术完成。
		但这仅限于本地版本库，如果版本已经提交到远程版本库，则即使在本地做版本库中做回退，也无法取消在远程版本库中的记录。


七、删除文件
	从工作区中删除文件
		rm test.txt
	
	查看版本库状态
		git status	

	增加删除文件操作到暂存区：
		git rm test.txt

	提交版本到分支
		git commit

八、远程仓库
	1.远程仓库概念
		为了方便版本的交换，通常会使用一个中心服务器，24小时连续运行，提供版本控制服务
		这就有两种做法：
			自己搭建中心服务器
			使用GitHub仓库托管网站	
		目前我们更多使用代码托管的方式工作

	2.GitHub远程仓库连接
		注册GitHub账号

		创建SSH Key
			$ ssh-keygen -t rsa -C "youremail@example.com"
		最终，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

		登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

	3.关联远程仓库
		当我们已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，非常方便
		登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
		在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库

		本地关联到远程仓库：
			$ git remote add origin git@github.com:piaoqian/learngit.git

	4.推送到远程仓库
		把本地库的内容推送到远程:
			$ git push -u origin master

		第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
			$ git push origin master

	5.从远程仓库克隆
		$ git clone git@github.com:piaoqian/gitskills.git

	6.拉取版本
		$ git pull

	7.删除远程仓库关联
		$git remote rm origin
		
九、分支管理
	1.分支概念
		可以从当前的开发线中分割出一个新的开发线，从而在不影响原来开发线的过程中，开发并提交代码，等到新的开发线开发完成，可以一次性加入原开发线，即进行分支合并操作。
		分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
		现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
	
	2.分支的使用
		默认git中只有一个主分支master，head就指向master

					head
					  |
					master	
					  |
			x----x----x

		每次提交master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长									
						 head
						   |
						 master	
						   |
			x----x----x----x
			

		当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：
			创建分支：
				$ git branch dev
				$ git checkout dev
				或
				$ git checkout -b dev
				-b参数表示创建并切换
			用git branch命令查看当前分支
				$git branch

						 master	
						   |
			x----x----x----x
					 	   |
						  dev
					  	   |
						 head
						 
		Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
		从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变
			创建文件：
				test2.txt
					creating a new branch is quick.
			提交：
				$ git add test2.txt
				$ git commit -m "branch test"
		
				 		master	
						   |
			x----x----x----x----x
								|
							   dev
								|
							   head

		如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：
			切换回主分支
				$git checkout master

						  head
						   |
						 master	
					   	   |
			x----x----x----x----x
								|
							   dev
							   
			把dev分支的工作成果合并到master分支上。git merge命令用于合并指定分支到当前分支。此时采用的是快速合并策略。
				$git merge dev

							   head
								|
							  master	
						   		|
			x----x----x----x----x
								|
							   dev

							   
		合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：
			删除dev分支:
				$ git branch -d dev
			查看branch：
				$ git branch
				
							   head
								|
							  master	
						   		|
			x----x----x----x----x

	3.冲突
		当多个分支之间的进行合并时，可能会产生冲突，需要对冲突解决后才能合并分支

		创建新的分支feature1
			$ git checkout -b feature1

		修改文件:		
			test2.txt
				creating a new branch is quick and simple.

		在feature1分支上提交:		
			$ git add test2.txt
			$ git commit -m "AND simple"

		切换到master分支：
			$ git checkout master

		修改文件：
			test2.txt
				Creating a new branch is quick & simple.
		在master分支上提交:		
			$ git add test2.txt
			$ git commit -m "& simple"

		这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突：
			$ git merge feature1

		Git告诉我们，test2.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：
			$ git status

		修改如下后保存：
			Creating a new branch is quick and simple.

		再提交:
			$ git add test2.txt 
			$ git commit -m "conflict fixed"

		用带参数的git log也可以看到分支的合并情况：
			$ git log --graph --pretty=oneline --abbrev-commit

		最后，删除feature1分支：
			$ git branch -d feature1

		冲突解决。

	4.强制禁止快速合并策略
		通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
		如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

		创建dev分支：
			$ git checkout -b dev

		修改文件:		
			test2.txt
				creating a new branch is quick and simple xxx.
		提交：
			$ git add readme.txt 
			$ git commit -m "add merge"	

		切换回master:
			$ git checkout master

		强制禁止快速合并模式，合并分支：
			$ git merge --no-ff -m "merge with no-ff" dev

	5.分支策略
		master分支应该是非常稳定的，也就是仅用来发布新版本
		干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本

	6.stash暂存分支
		当某一分支工作到一半，突然需要切换到其他分支时，可以通过stash机制将当前分支状态暂存起来，再在需要的时候恢复。

		创建新的分支feature1
			$ git checkout -b dev
		修改文件:		
			test3.txt
				today is a good day.
		加入文件：
			$ git add test3.txt
		临时需要切换到其他分支，暂存当前分支：
			$ git stash
		查看状态：
			$ git status
		切换到dev2分支
			$ git checkout master	
			$ git checkout -b dev2
		修改文件：
			test4.txt
				happy every day
		加入文件：
			$ git add test4.txt
		提交文件：
			$ git commit test4.txt -m "add test4.txt"
		
		切换到master分支
			$ git checkout master		
		合并分支
			$ git merge --no-ff -m "merged dev2" dev2

		切换回dev分支：
			$ git checkout dev
			$ git status
		发现工作区是干净的，需要恢复暂存分支：
			$ git stash list
			有两个办法：
				一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
				另一种方式是用git stash pop，恢复的同时把stash内容也删	
			$ git stash pop

	7.多人协作
		在多人使用远程仓库进行工作时，往往在同一个分支上的操作会存在冲突，此时需要远程冲突合并。
		多人协作的工作模式通常是这样：
			首先，可以试图用git push origin <branch-name>推送自己的修改；
			如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
			如果合并有冲突，则解决冲突，并在本地提交；
			没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
		如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>
十、标签
	git中的版本都有版本编号，对代码的提交和回滚都是基于版本编号进行的，但是git中的版本编号是一串随机串，不好记忆，此时可以使用标签机制为某个提交增加标签，方便以后查找

	在当前分支当前提交上打标签：
		$git tag v1.0	
	查看所有标签,默认标签是打在最新提交的commit上的：
		$git tag
	如果想要打标签在某个指定历史commit上：
		$ git tag v0.9 f52c633
	还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
		$ git tag -a v0.1 -m "version 0.1 released" 1094adb
	可以通过如下命令查看一个tag信息：
		$ git show v0.1
	如果标签打错了，也可以删除：
		$ git tag -d v0.1
	如果要推送某个标签到远程，使用命令git push origin <tagname>：
		$ git push origin v1.0
	或者，一次性推送全部尚未推送到远程的本地标签：
		$ git push origin --tags	
	如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
		$ git tag -d v0.9	
	然后，从远程删除。删除命令也是push，但是格式如下：
		$ git push origin :refs/tags/v0.9

十一、定制Git
	1.忽略特定文件
		有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件等等
		此时，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
		不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore

	2.别名
		配置别名：
			$ git config --global alias.st status
			$ git config --global alias.co checkout
			$ git config --global alias.ci commit
			$ git config --global alias.br branch

		删除别名
			找到.git/config文件
			找到[alias]标签，删除其中别名

十二、使用码云
	使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。
	可以使用国内的Git托管服务——码云（gitee.com），和GitHub相比，码云也提供免费的Git仓库。
	此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。

	
十三、Eclipse中的Git插件